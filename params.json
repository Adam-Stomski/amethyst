{"name":"Amethyst","tagline":"Amethyst is a Rails inspired web-framework for Crystal language","body":"# Amethyst [![Build Status](https://travis-ci.org/Codcore/Amethyst.svg)](https://travis-ci.org/Codcore/Amethyst)\r\n\r\nAmethyst is a web framework written in [Crystal](https://github.com/manastech/crystal) language. The goals of Amethyst are to be fast as Node.js and comfortable as Rails. Note, Amethyst is his early stages, so a lot of features are missing yet. However, it works :). Why I called my web framework \"Amethyst\" ? Because Crystal  has a light purple color at GitHub like [amethyst gemstone](http://en.wikipedia.org/wiki/Amethyst).\r\n\r\nFor now, next things are implemented:\r\n- class-based controllers with actions\r\n- middleware support\r\n- simple routing\r\n\r\nNext release is almost ready, and will introduce new features:\r\n- REST\r\n- GET and POST params\r\n- Static files handling\r\n- improved controllers and middleware implementation\r\n- Cookies support\r\n\r\nFor details, see docs on [GitHub](https://github.com/Codcore/Amethyst).\r\n\r\n## Installation\r\n\r\nSuggested that you have installed [Crystal](https://github.com/manastech/crystal) 0.7.2. **Code may not work properly with earliers version of 0.7.* branch**\r\n```\r\ngit clone https://github.com/Codcore/Amethyst.git\r\n```\r\n\r\nOr add it to `Projectfile` of your Crystal project\r\n\r\n```crystal\r\ndeps do\r\n  github \"Codcore/amethyst\"\r\nend\r\n```\r\nYou can play with example of simple web-application written with Amethyst at ```examples``` directory:\r\n```\r\ncrystal examples/simple_application.cr\r\n```\r\n## Usage\r\n\r\nIf you want to load Amethyst in global namespace to be able not to prepend classes with name of modules they are in (for example, ```Base::Controller```),you can load all modules into global namespace next way:\r\n```crystal\r\nrequire \"amethyst/all\"\r\n```\r\nFrom that moment, you can type ```App.new``` instead of ```Base::App.new```, ```Base::Controller``` instead ```Base::Controller```, etc.)\r\n\r\n# Controllers\r\nAmethyst controllers are classes with method-actions. The name of any controller must be like ```NameController```,\r\nand it needs to be inherited from ```Base::Controller```. Here is an example of simple controller:\r\n\r\n```crystal\r\nrequire \"../src/amethyst\"\r\n\r\nclass IndexController < Base::Controller\r\n  actions :hello, :bye\r\n\r\n  def hello\r\n    html \"<p>Hello, you're asked a #{request.method} #{request.path}</p> \\n\r\n          <a href='/bye'>Visit <b>bye</b> action</a>\"\r\n  end\r\n\r\n  def bye\r\n    html \"<p>Bye!We hope you will come back</p>\"\r\n  end\r\nend\r\n```\r\nControllers describe actions as a methods. Actions have direct access to request and response objects, and other helpers, such as a ```html``` .Code ```actions :hello, :bye``` lets app to know which methods of your contoller are actions, and which aren't.\r\n\r\n# Middleware\r\nMiddleware are implemented as classes. Middleware class inherits from ```Base::Middleware``` (or, just type ```Middleware``` if you prefer ```require amethyst/all```), and should have the ```call``` method.\r\n```crystal\r\ndef call(request)\r\nend\r\n```\r\n Here is an example of middleware that calculates time elapsed between request and response.\r\n\r\n```crystal\r\nclass TimeLogger < Middleware::Base\r\n\r\n  # This one will be called when app gets request. It accepts Http::Request\r\n  def call(request)\r\n    logger = Base::App.logger\r\n    t_req = Time.now\r\n    response = @app.call(request)\r\n    t_res  = Time.now\r\n    elapsed = (t_res - t_req).to_f*1000\r\n    string  = \"%.4f ms\" % elapsed\r\n    logger.display_name\r\n    logger.display_as_list ({ \"Time elapsed\" => string })\r\n    response\r\n  end\r\nend\r\n```\r\n\r\n#Routing\r\n\r\nAmethyst has Rails-like approach to describe routes. For now, only ```get()``` supported. \r\nIt consists of path and string ```controller_name#action_name```\r\n\r\n```crystal \r\nBase::App.routes.draw do |routes|\r\n  # maps GET \"/\" to \"hello\" action of IndexController\r\n  get \"/\",    \"index#hello\"\r\n  # maps GET \"/bye\" to \"bye\" action of IndexController\r\n  get \"/bye\", \"index#bye\"\r\n  post \"/post\", \"index#bye\" # you can use GET, POST, PUT, DELETE\r\n  all \"/bye-all\", \"index#bye\" # resoonds to all HTTP methods\r\nend\r\n```\r\n\r\nNote, ```/bye``` and ```/bye/``` work slightly different. First matches ```/bye, /bye/, /bye_something```, second is \"strict\",\r\nand matches only ```/bye``` and ```/bye/```. Both not matches ```/bye/something```.\r\n\r\nYou can specify params to be captured:\r\n```crystal \r\nget \"/users/:id\", \"users#show\" #(params doesn't work yet)\r\n```\r\n\r\nAfter you defined a controller, you have to register it in app with ```app.routes.register(NameController)``` where ```NameController```(CamelCase) is the classname of your controller:\r\n```crystal\r\nBase::App.routes.register(IndexController)\r\n```\r\n# Application creating\r\n\r\n```crystal\r\n# Middleware registering\r\nBase::App.use TimeMiddleware\r\napp = Base::App.new\r\n```\r\nYou can set a port and app name (defaul port is ```8080```, default name is name of file application is in):\r\n```crystal\r\napp.port = 8080\r\napp.name = \"example\"\r\n```\r\n#Running application\r\n```crystal\r\napp.serve\r\n```\r\n\r\n## Development\r\n\r\nFeel free to fork project and make pull-requests. Stick to standart project structure and name conventions:\r\n\r\n    src/\r\n      amethyst/\r\n        module1/       # module1 files\r\n          class1.cr\r\n          ...\r\n          module1.cr   # loads all module1 files into namespace Amethyst::Module1\r\n        module2/\r\n          class1.cr    # describe class Class1 (module, struct, i.e)\r\n          ...\r\n          module2.cr   # loads all module2 files into namespace Amethyst::Module2\r\n        file_module.cr # module that consists of one file\r\n      amethyst.cr      # requires module1.cr, module2.cr, file_module.cr\r\n\r\n    spec/\r\n      module1/\r\n        class1_spec.cr # specs for Module1::Class\r\n        spec_helper.cr # loads main spec_helper\r\n      module2/\r\n        class2_spec.cr\r\n      spec_helper      # loads \"amethyst/all\"\r\n\r\n    examples/          # examples to play with\r\n                       # don't forget to require \"..src/amethyst\" or \"..src/all\"\r\n\r\n\r\n\r\n## Contributing\r\n\r\nI would be glad for any help with contributing.\r\n\r\n1. Fork it ( https://github.com/Codcore/amethyst/fork )\r\n2. Create your feature branch (git checkout -b my-new-feature)\r\n3. Commit your changes (git commit -am 'Add some feature')\r\n4. Push to the branch (git push origin my-new-feature)\r\n5. Create a new Pull Request\r\n\r\n\r\n## Contributors\r\n\r\n- [Andrew Yaroshuk](https://github.com/[your-github-name]) Codcore - creator, maintainer\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}